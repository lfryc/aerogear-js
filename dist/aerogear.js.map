{
  "version": 3,
  "file": "aerogear.js",
  "sources": [
    "src/microlib/banner.js",
    "dist/aerogear.core.js",
    "dist/aerogear.ajax.js",
    "dist/aerogear.authz.js",
    "dist/oauth2.js",
    "src/microlib/footer.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oB;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBgB;AAC4B;AACd;AAC+B;AAC3D;AAAA;AAEE;AACwG;AACxF;AACX;AAC4K;AAC5G;AACrE;AAC4B;AACvB;AACI;AACuC;AACR;AAAA;AAEzB;AACF;AAC4B;AACS;AACoC;AAChD;AACuB;AACrB;AACf;AAAA;AAEc;AACqD;AACjF;AACc;AAAA;AAE4D;AACJ;AAAA;AAEgD;AAC3H;AACF;AACF;AACK;AACc;AACN;AACb;AAAA;AAE6E;AAClC;AAC4B;AAAA;AAE8C;AACvH;AAAA;AAE+B;AACS;AAAA;AAE7B;AACZ;AACC;AACqH;AAClG;AACd;AAC2L;AAC3H;AACrE;AAC+B;AAC1B;AACI;AACuC;AAAA;AAEd;AACgB;AACrB;AACS;AACuB;AACrB;AACf;AAAA;AAEc;AACL;AACvB;AAC4B;AACnC;AACF;AACmB;AACwB;AACX;AAClC;AAAA;AAE+B;AACS;AAAA;AAE7B;AACZ;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOwB;AACH;AACM;AACW;AACX;AACD;AACW;AACjC;AACF;AACa;AACd;AAAA;AAEc;AACH;AACG;AACf;AAAA;AAEY;AAAU;AAAQ;AAAA;AAAA,E;AC/I9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKgC;AACoB;AACnB;AAAA;AAES;AACnB;AAC2C;AACM;AACI;AACgD;AACtC;AACpE;AACF;AACe;AACD;AACE;AAAA;AAED;AACJ;AACkG;AAC9E;AACkF;AACjH;AACwB;AACqB;AAC5B;AACc;AACQ;AAC3C;AACJ;AAAA;AAE2D;AAC3C;AACY;AAC4E;AAChG;AACJ;AACiC;AACrC;AAAA;AAE2D;AACF;AACd;AAC3C;AAAA;AAE4E;AAAA;AAEzC;AACoB;AACX;AAAA;AAErB;AACgB;AAC+B;AAClE;AACJ;AAAA;AAEmB;AACS;AACmC;AACF;AAAA;AAE9B;AACO;AAClC;AAAA;AAE6B;AAChC;AAAA;AAEe;AACa;AACL;AAAA;AAE4B;AACnD;AAAA;AAEyB;AACsB;AACC;AACgE;AAAA;AAEtG;AACc;AACK;AACT;AAChB;AACJ;AAAA;AAEmB;AACtB;AACL;AAAA;AAEiB;AAAA;AAAA;AAAA,E;AC5IlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGkC;AACS;AACG;AACJ;AACtC;AAAA;AAEmB;AACF;AAAA;AAES;AAC6B;AAAA;AAErD;AACyF;AACxD;AACpB;AACK;AAClB;AAC8B;AAAA;AAEd;AACtB;AAAA;AAE8B;AACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnB;AAAA;AAEW;AAAA;AAEjB;AAAA;AAAA;AAAA,E;ACjErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAG2D;AAChB;AACmB;AACI;AAC9D;AAAA;AAEyB;AAAA;AAEF;AACsB;AACU;AAC0C;AAC0B;AACxE;AACpC;AAC+B;AACC;AACjB;AAC+B;AACZ;AACD;AACM;AAAA;AAElC;AAClB;AAC8C;AACrC;AACQ;AACjB;AAC+B;AACU;AACqC;AAC5E;AAAA;AAEkB;AACrB;AAAA;AAEC;AAC8C;AACrC;AACQ;AACjB;AACyB;AACX;AACf;AAAA;AAEC;AAC8C;AACrC;AACQ;AACjB;AAC4B;AACX;AAClB;AAAA;AAEC;AAC8C;AACrC;AACQ;AACjB;AACoC;AACX;AAC1B;AAAA;AAEC;AAC8C;AACrC;AACQ;AACjB;AACsC;AACX;AAC5B;AAAA;AAEC;AACkF;AACzE;AACQ;AACjB;AAC2C;AAC1B;AAC+B;AACjD;AAAA;AAEC;AAC2C;AAClC;AACQ;AACjB;AACiD;AACqB;AACrC;AAChB;AAC6D;AAC7C;AAC1B;AACqC;AACqB;AAC/D;AACa;AAChB;AACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwC0E;AAAA;AAExD;AACuC;AAC3B;AAChB;AAAA;AAEwC;AAAA;AAEoB;AACjC;AACrB;AACuF;AAC1F;AACV;AAAA;AAEmC;AACyD;AACxD;AAC6E;AAChD;AACS;AACpB;AAChC;AACV;AACiD;AACgE;AAC3F;AACzB;AACuB;AACkB;AACxC;AACH;AAC4D;AAC1C;AACzB;AACF;AAAA;AAEW;AAC2B;AAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BqE;AAC3C;AACyC;AACX;AAAA;AAEzC;AACI;AACU;AACK;AAC1B;AACmC;AAC3C;AAAA;AAE0C;AAAA;AAAA;AAAA,E;AChR3C;AACA;AACA;AACA;AACA;AACA;AACA;A",
  "sourcesContent": [
    null,
    "/* AeroGear JavaScript Library\n * https://github.com/aerogear/aerogear-js\n * JBoss, Home of Professional Open Source\n * Copyright Red Hat, Inc., and individual contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n The AeroGear namespace provides a way to encapsulate the library's properties and methods away from the global namespace\n @namespace\n */\n\n/**\n AeroGear.Core is a base for all of the library modules to extend. It is not to be instantiated and will throw an error when attempted\n @class\n @private\n */\nfunction Core() {\n  // Prevent instantiation of this base class\n  if ( this instanceof Core ) {\n    throw \"Invalid instantiation of base class AeroGear.Core\";\n  }\n\n  /**\n   This function is used by the different parts of AeroGear to add a new Object to its respective collection.\n   @name AeroGear.add\n   @method\n   @param {String|Array|Object} config - This can be a variety of types specifying how to create the object. See the particular constructor for the object calling .add for more info.\n   @returns {Object} The object containing the collection that was updated\n   */\n  this.add = function( config ) {\n    var i,\n      current,\n      collection = this[ this.collectionName ] || {};\n    this[ this.collectionName ] = collection;\n\n    if ( !config ) {\n      return this;\n    } else if ( typeof config === \"string\" ) {\n      // config is a string so use default adapter type\n      collection[ config ] = Core[ this.lib ].adapters[ this.type ]( config, this.config );\n    } else if ( Array.isArray( config ) ) {\n      // config is an array so loop through each item in the array\n      for ( i = 0; i < config.length; i++ ) {\n        current = config[ i ];\n\n        if ( typeof current === \"string\" ) {\n          collection[ current ] = Core[ this.lib ].adapters[ this.type ]( current, this.config );\n        } else {\n          if( current.name ) {\n\n            // Merge the Module( authz, datamanger, ... )config with the adapters settings\n            current.settings = AeroGear.extend( current.settings || {}, this.config );\n\n            collection[ current.name ] = AeroGear[ this.lib ].adapters[ current.type || this.type ]( current.name, current.settings );\n          }\n        }\n      }\n    } else {\n      if( !config.name ) {\n        return this;\n      }\n\n      // Merge the Module( authz, datamanger, ... )config with the adapters settings\n      // config is an object so use that signature\n      config.settings = AeroGear.extend( config.settings || {}, this.config );\n\n      collection[ config.name ] = AeroGear[ this.lib ].adapters[ config.type || this.type ]( config.name, config.settings );\n    }\n\n    // reset the collection instance\n    this[ this.collectionName ] = collection;\n\n    return this;\n  };\n  /**\n   This function is used internally by datamanager, etc. to remove an Object (store, etc.) from the respective collection.\n   @name AeroGear.remove\n   @method\n   @param {String|String[]|Object[]|Object} config - This can be a variety of types specifying how to remove the object. See the particular constructor for the object calling .remove for more info.\n   @returns {Object} The object containing the collection that was updated\n   */\n  this.remove = function( config ) {\n    var i,\n      current,\n      collection = this[ this.collectionName ] || {};\n\n    if ( typeof config === \"string\" ) {\n      // config is a string so delete that item by name\n      delete collection[ config ];\n    } else if ( Array.isArray( config ) ) {\n      // config is an array so loop through each item in the array\n      for ( i = 0; i < config.length; i++ ) {\n        current = config[ i ];\n\n        if ( typeof current === \"string\" ) {\n          delete collection[ current ];\n        } else {\n          delete collection[ current.name ];\n        }\n      }\n    } else if ( config ) {\n      // config is an object so use that signature\n      delete collection[ config.name ];\n    }\n\n    // reset the collection instance\n    this[ this.collectionName ] = collection;\n\n    return this;\n  };\n};\n\n/**\n Utility function to merge many Objects in one target Object which is the first object in arguments list.\n @private\n @method\n */\nvar extend = function() {\n  var name, i, source,\n    target = arguments[ 0 ];\n  for( i=1; i<arguments.length; i++ ) {\n    source = arguments[ i ];\n    for( name in source ) {\n      target[ name ] = source[ name ];\n    }\n  }\n  return target;\n};\n\nvar AeroGear = {\n  Core: Core,\n  extend: extend\n}\n\nexport { Core, AeroGear, extend }",
    "/* AeroGear JavaScript Library\n* https://github.com/aerogear/aerogear-js\n* JBoss, Home of Professional Open Source\n* Copyright Red Hat, Inc., and individual contributors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n* http://www.apache.org/licenses/LICENSE-2.0\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { extend } from 'aerogear.core';\n\n/**\n    The AeroGear.ajax is used to perform Ajax requests.\n    @status Experimental\n    @param {Object} [settings={}] - the settings to configure the request\n    @param {String} [settings.url] - the url to send the request to\n    @param {String} [settings.type=\"GET\"] - the type of the request\n    @param {String} [settings.dataType=\"json\"] - the data type of the recipient's response\n    @param {String} [settings.accept=\"application/json\"] - the media types which are acceptable for the recipient's response\n    @param {String} [settings.contentType=\"application/json\"] - the media type of the entity-body sent to the recipient\n    @param {Object} [settings.headers] - the HTTP request headers\n    @param {Object} [settings.params] - contains query parameters to be added in URL in case of GET request or in request body in case of POST and application/x-www-form-urlencoded content type\n    @param {Object} [settings.data] - the data to be sent to the recipient\n    @returns {Object} An ES6 Promise - the object returned will look like:\n\n    {\n        data: dataOrError, - the data or an error\n        statusText: statusText, - the status of the response\n        agXHR: request - the xhr request object\n    };\n\n    @example\n\n        var es6promise = AeroGear.ajax({\n            type: \"GET\",\n            params: {\n                param1: \"val1\"\n            },\n            url: \"http://SERVER:PORT/CONTEXT\"\n        });\n*/\nvar ajax = function( settings ) {\n    return new Promise( function( resolve, reject ) {\n        settings = settings || {};\n\n        var request = new XMLHttpRequest(),\n            that = this,\n            requestType = ( settings.type || \"GET\" ).toUpperCase(),\n            responseType = ( settings.dataType || \"json\" ).toLowerCase(),\n            accept = ( settings.accept || \"application/json\" ).toLowerCase(),\n            // TODO: compare contentType by checking if it starts with some value since it might contains the charset as well\n            contentType = ( settings.contentType || \"application/json\" ).toLowerCase(),\n            header,\n            name,\n            urlEncodedData = [],\n            url = settings.url,\n            data = settings.data;\n\n        if ( settings.params ) {\n            // encode params\n            if( requestType === \"GET\" || ( requestType === \"POST\" && contentType === \"application/x-www-form-urlencoded\" ) ) {\n                for( name in settings.params ) {\n                    urlEncodedData.push( encodeURIComponent( name ) + \"=\" + encodeURIComponent( settings.params[ name ] || \"\" ) );\n                }\n            // add params in request body\n            } else if ( contentType === \"application/json\" ) {\n                data = data || {};\n                data.params = data.params || {};\n                extend( data.params,  settings.params );\n            }\n        }\n\n        if ( contentType === \"application/x-www-form-urlencoded\" ) {\n            if ( data ) {\n                for( name in data ) {\n                    urlEncodedData.push( encodeURIComponent( name ) + '=' + encodeURIComponent( data[ name ] ) );\n                }\n            }\n            data = urlEncodedData.join( \"&\" );\n        }\n\n        // if is GET request & URL params exist then add them in URL\n        if( requestType === \"GET\" && urlEncodedData.length > 0 ) {\n            url += \"?\" + urlEncodedData.join( \"&\" );\n        }\n\n        request.open( requestType, url, true, settings.username, settings.password );\n\n        request.responseType = responseType;\n        request.setRequestHeader( \"Content-Type\", contentType );\n        request.setRequestHeader( \"Accept\", accept );\n\n        if( settings.headers ) {\n            for ( header in settings.headers ) {\n                request.setRequestHeader( header, settings.headers[ header ] );\n            }\n        }\n\n        // Success and 400's\n        request.onload = function() {\n            var status = ( request.status < 400 ) ? \"success\" : \"error\",\n                promiseValue = _createPromiseValue( request, status );\n\n            if( status === \"success\" ) {\n                return resolve( promiseValue );\n            }\n\n            return reject( promiseValue );\n        };\n\n        // Network errors\n        request.onerror = function() {\n            var status = \"error\";\n\n            reject( _createPromiseValue( request, status ) );\n        };\n\n        // create promise arguments\n        function _createPromiseValue( request, status ) {\n            var statusText = request.statusText || status,\n                dataOrError = ( responseType === 'text' || responseType === '') ? request.responseText : request.response;\n\n            return {\n                data: dataOrError,\n                statusText: statusText,\n                agXHR: request\n            };\n        };\n\n        request.send( data );\n    });\n};\n\nexport default ajax;",
    "/* AeroGear JavaScript Library\n* https://github.com/aerogear/aerogear-js\n* JBoss, Home of Professional Open Source\n* Copyright Red Hat, Inc., and individual contributors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n* http://www.apache.org/licenses/LICENSE-2.0\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { AeroGear, Core } from 'aerogear.core';\n\n/**\n    The AeroGear.Authorization namespace provides an authentication API.\n    @status Experimental\n    @class\n    @param {String|Array|Object} [config] - A configuration for the service(s) being created along with the authorizer. If an object or array containing objects is used, the objects can have the following properties:\n    @param {String} config.name - the name that the module will later be referenced by\n    @param {String} [config.type=\"OAuth2\"] - the type of module as determined by the adapter used\n    @param {Object} [config.settings={}] - the settings to be passed to the adapter. For specific settings, see the documentation for the adapter you are using.\n    @returns {Object} The created authorizer containing any authz services that may have been created\n    @example\n    // Create an empty authorizer\n    var authz = AeroGear.Authorization();\n */\nfunction Authorization ( config ) {\n    // Allow instantiation without using new\n    if ( !( this instanceof Authorization ) ) {\n        return new Authorization( config );\n    }\n\n    // Super constructor\n    Core.call( this );\n\n    this.lib = \"Authorization\";\n    this.type = config ? config.type || \"OAuth2\" : \"OAuth2\";\n\n    /**\n        The name used to reference the collection of service instances created from the adapters\n        @memberOf AeroGear.Authorization\n        @type Object\n        @default services\n     */\n    this.collectionName = \"services\";\n\n    this.add( config );\n};\n\nAuthorization.prototype = Core;\nAuthorization.constructor = Core.Authorization;\n\n/**\n    The adapters object is provided so that adapters can be added to the AeroGear.Authorization namespace dynamically and still be accessible to the add method\n    @augments AeroGear.Authorization\n */\nAuthorization.adapters = {};\n\nAeroGear.Authorization = Authorization;\n\nexport { Authorization };",
    "/* AeroGear JavaScript Library\n* https://github.com/aerogear/aerogear-js\n* JBoss, Home of Professional Open Source\n* Copyright Red Hat, Inc., and individual contributors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n* http://www.apache.org/licenses/LICENSE-2.0\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { extend } from 'aerogear.core';\nimport ajax from 'aerogear.ajax';\nimport { Authorization } from 'aerogear.authz';\n\n\n/**\n    The OAuth2 adapter is the default type used when creating a new authorization module. It uses AeroGear.ajax to communicate with the server.\n    This constructor is instantiated when the \"Authorizer.add()\" method is called\n    @status Experimental\n    @constructs AeroGear.Authorization.adapters.OAuth2\n    @param {String} name - the name used to reference this particular authz module\n    @param {Object} settings={} - the settings to be passed to the adapter\n    @param {String} settings.clientId - the client id/ app Id of the protected service\n    @param {String} settings.redirectURL - the URL to redirect to\n    @param {String} settings.authEndpoint - the endpoint for authorization\n    @param {String} [settings.validationEndpoint] - the optional endpoint to validate your token.  Not in the Spec, but recommend for use with Google's API's\n    @param {String} settings.scopes - a space separated list of \"scopes\" or things you want to access\n    @returns {Object} The created authz module\n    @example\n    // Create an empty Authenticator\n    var authz = AeroGear.Authorization();\n\n    authz.add({\n        name: \"coolThing\",\n        settings: {\n            clientId: \"12345\",\n            redirectURL: \"http://localhost:3000/redirector.html\",\n            authEndpoint: \"http://localhost:3000/v1/authz\",\n            scopes: \"userinfo coolstuff\"\n        }\n    });\n */\nAuthorization.adapters.OAuth2 = function( name, settings ) {\n    // Allow instantiation without using new\n    if ( !( this instanceof Authorization.adapters.OAuth2 ) ) {\n        return new Authorization.adapters.OAuth2( name, settings );\n    }\n\n    settings = settings || {};\n\n    // Private Instance vars\n    var state = uuid(), //Recommended in the spec,\n        clientId = settings.clientId, //Required by the spec\n        redirectURL = settings.redirectURL, //optional in the spec, but doesn't make sense without it,\n        validationEndpoint = settings.validationEndpoint, //optional,  not in the spec, but recommend to use with Google's API's\n        scopes = settings.scopes, //Optional by the spec\n        accessToken,\n        localStorageName = \"ag-oauth2-\" + clientId,\n        authEndpoint = settings.authEndpoint + \"?\" +\n            \"response_type=token\" +\n            \"&redirect_uri=\" + encodeURIComponent( redirectURL ) +\n            \"&scope=\" + encodeURIComponent( scopes ) +\n            \"&state=\" + encodeURIComponent( state ) +\n            \"&client_id=\" + encodeURIComponent( clientId );\n\n    // Privileged Methods\n    /**\n        Returns the value of the private settings var\n        @private\n        @augments OAuth2\n     */\n    this.getAccessToken = function() {\n        if( localStorage[ localStorageName ] ) {\n            accessToken = JSON.parse( localStorage[ localStorageName ] ).accessToken;\n        }\n\n        return accessToken;\n    };\n\n    /**\n        Returns the value of the private settings var\n        @private\n        @augments OAuth2\n     */\n    this.getState = function() {\n        return state;\n    };\n\n    /**\n        Returns the value of the private settings var\n        @private\n        @augments OAuth2\n     */\n    this.getClientId = function() {\n        return clientId;\n    };\n\n    /**\n        Returns the value of the private settings var\n        @private\n        @augments OAuth2\n     */\n    this.getLocalStorageName = function() {\n        return localStorageName;\n    };\n\n    /**\n        Returns the value of the private settings var\n        @private\n        @augments OAuth2\n     */\n    this.getValidationEndpoint = function() {\n        return validationEndpoint;\n    };\n\n    /**\n        Enrich the error response with authentication endpoint URL and re-throw the error\n        @private\n        @augments OAuth2\n     */\n    this.enrichErrorAndRethrow = function( err ) {\n        err = err || {};\n        throw extend( err, { authURL: authEndpoint } );\n    };\n\n    /**\n        Returns the value of a parsed query string\n        @private\n        @augments OAuth2\n     */\n    this.parseQueryString = function( locationString ) {\n        // taken from https://developers.google.com/accounts/docs/OAuth2Login\n        // First, parse the query string\n        var params = {},\n            queryString = locationString.substr( locationString.indexOf( \"#\" ) + 1 ),\n            regex = /([^&=]+)=([^&]*)/g,\n            m;\n        while ( ( m = regex.exec(queryString) ) ) {\n            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n        }\n        return params;\n    };\n};\n\n/**\n    Validate the Authorization endpoints - Takes the querystring that is returned after the \"dance\" unparsed.\n    @param {String} queryString - The returned query string to be parsed\n    @returns {Object} The ES6 promise (exposes AeroGear.ajax response as a response parameter; if an error is returned, the authentication URL will be appended to the response object)\n    @example\n    // Create the Authorizer\n    var authz = AeroGear.Authorization();\n\n    authz.add({\n        name: \"coolThing\",\n        settings: {\n            clientId: \"12345\",\n            redirectURL: \"http://localhost:3000/redirector.html\",\n            authEndpoint: \"http://localhost:3000/v1/authz\",\n            scopes: \"userinfo coolstuff\"\n        }\n    });\n\n    // Make the call.\n    authz.services.coolThing.execute({url: \"http://localhost:3000/v1/authz/endpoint\", type: \"GET\"})\n        .then( function( response ){\n            ...\n        })\n        .catch( function( error ) {\n            // an error happened, so take the authURL and do the \"OAuth2 Dance\",\n        });\n    });\n\n    // After a successful response from the \"OAuth2 Dance\", validate that the query string is valid, If all is well, the access_token will be stored.\n    authz.services.coolThing.validate( responseFromAuthEndpoint )\n        .then( function( response ){\n            ...\n        })\n        .catch( function( error ) {\n            ...\n        });\n\n */\nAuthorization.adapters.OAuth2.prototype.validate = function( queryString ) {\n\n    var that = this,\n        parsedQuery = this.parseQueryString( queryString ),\n        state = this.getState(),\n        promise;\n\n    promise = new Promise( function( resolve, reject ) {\n\n        // Make sure that the \"state\" value returned is the same one we sent\n        if( parsedQuery.state !== state ) {\n            // No Good\n            reject( { error: \"invalid_request\", state: state, error_description: \"state's do not match\"  } );\n            return;\n        }\n\n        if( that.getValidationEndpoint() ) {\n            ajax({ url: that.getValidationEndpoint() + \"?access_token=\" + parsedQuery.access_token })\n                .then( function( response ) {\n                    // Must Check the audience field that is returned.  This should be the same as the registered clientID\n                    // This value is a JSON object that is in xhr.response\n                    if( that.getClientId() !== response.agXHR.response.audience ) {\n                        reject( { \"error\": \"invalid_token\" } );\n                        return;\n                    }\n                    // Perhaps we can use crypt here to be more secure\n                    localStorage.setItem( that.getLocalStorageName(), JSON.stringify( { \"accessToken\": parsedQuery.access_token } ) );\n                    resolve( parsedQuery );\n                })\n                .catch( function( err ) {\n                    reject( { \"error\": \"invalid_token\" } );\n                });\n        } else {\n            // The Spec does not specify that you need to validate the token\n            reject( parsedQuery );\n        }\n    });\n\n    return promise\n        .catch( this.enrichErrorAndRethrow );\n};\n\n/**\n    @param {Object} options={} - Options to pass to the execute method\n    @param {String} [options.type=\"GET\"] - the type of the request\n    @param {String} [options.url] - the url of the secured endpoint you want to access\n    @returns {Object} The ES6 promise (exposes AeroGear.ajax response as a response parameter; if an error is returned, the authentication URL will be appended to the response object)\n    @example\n    // Create the Authorizer\n    var authz = AeroGear.Authorization();\n\n    authz.add({\n        name: \"coolThing\",\n        settings: {\n            clientId: \"12345\",\n            redirectURL: \"http://localhost:3000/redirector.html\",\n            authEndpoint: \"http://localhost:3000/v1/authz\",\n            scopes: \"userinfo coolstuff\"\n        }\n    });\n\n\n    // Make the authorization call.\n    authz.services.coolThing.execute()\n        .then( function( response ){\n            ...\n        })\n        .catch( function( error ) {\n            ...\n        });\n */\nAuthorization.adapters.OAuth2.prototype.execute = function( options ) {\n    options = options || {};\n    var url = options.url + \"?access_token=\" + this.getAccessToken(),\n        contentType = \"application/x-www-form-urlencoded\";\n\n    return ajax({\n            url: url,\n            type: options.type,\n            contentType: contentType\n        })\n        .catch( this.enrichErrorAndRethrow );\n};\n\nexport default Authorization.adapters.OAuth2;",
    null
  ]
}